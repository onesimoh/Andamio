using System;
using System.Collections.Generic;
using System.Text;
using System.ComponentModel;

namespace Andamio
{
    /// <summary>
    /// Event data class, provides a generic type element that represents data generated by the event.
    /// </summary>
    /// <typeparam name="T">The generic type specifies an event data element that is propagated back to the client.</typeparam>
    public class ItemEventArgs<T> : EventArgs
    {        
        private ItemEventArgs() : base()
        { 
        }

        /// <summary>
        /// Constructs an ItemEventArgs object and specified a data element related to the event.
        /// </summary>
        /// <param name="item">A data element related to the event.</param>
        public ItemEventArgs(T item) : base()
        {
            Item = item;
        }

        /// <summary>
        /// Gets data element associated to this event.
        /// </summary>
        public T Item { get; private set; }
    }

    /// <summary>
    /// Event data class, provides a generic type element that represents data generated by the event.
    /// </summary>
    /// <typeparam name="T">The generic type specifies an event data element that is propagated back to the client.</typeparam>
    public class CancelItemEventArgs<T> : CancelEventArgs
    {        
        private CancelItemEventArgs() : base()
        { 
        }

        /// <summary>
        /// Constructs an ItemEventArgs object and specified a data element related to the event.
        /// </summary>
        /// <param name="item">A data element related to the event.</param>
        public CancelItemEventArgs(T item) : base()
        {
            Item = item;
        }

        /// <summary>
        /// Gets data element associated to this event.
        /// </summary>
        public T Item { get; private set; }
    }


    /// <summary>
    /// Represents the method that will handle an event.
    /// </summary>
    /// <typeparam name="T">The generic type specifies an event data element that is propagated back to the client.</typeparam>
    /// <param name="sender">The source of the event.</param>
    /// <param name="e">An ItemEventArgs that contains the event data.</param>
    public delegate void ItemEventHandler<T>(object sender, ItemEventArgs<T> e);

    /// <summary>
    /// Represents the method that will handle an event.
    /// </summary>
    /// <typeparam name="T">The generic type specifies an event data element that is propagated back to the client.</typeparam>
    /// <param name="sender">The source of the event.</param>
    /// <param name="e">An ItemEventArgs that contains the event data.</param>
    public delegate void CancelItemEventHandler<T>(object sender, CancelItemEventArgs<T> e);
}
